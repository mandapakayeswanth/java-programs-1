Arrays and Inheritance
& Interfaces
Way to Store and Acquire properties from Parents which is not ours

Arrays

 Introduction.
 Declaration and Initialization of Arrays.
 Storage of Array in Computer Memory.
 Types and Modifying Array Elements.
 Accessing Elements of Arrays.
 Coding Examples

Introduction

 An array is a linear data structure that can store collection of homogeneous
elements in an sequential memory location that are accessed by index.
 The index is an integer value that indicates the position of an element within
the array.
 In Java, arrays are zero-indexed, meaning the first element is at index 0, the
second element is at index 1, and so on.
 Key Characteristics of Arrays:
1. Fixed Size
2. Homogeneous Elements
3. Indexed Access

Declaring and Initialization of Arrays

Declaration: type of array followed by []
 int[] numbers; or int numbers[]; // Declares an array of integers
 String[] names; or String names[]; // Declares an array of strings
Instantiation: an array instance using the new keyword
 numbers = new int[5]; // Creates an array of 5 integers
 names = new String[10]; // Creates an array of 10 strings
Initialization: initialize an array at the time of declaration.
 int[] ages = {25, 30, 35}; // Initializes an array with 3 integers
 String[] colors = {"Red", "Green", "Blue"}; // Initializes an array with 3 strings
int[] numbers = new int[]{ 1,2,3,4,5,6,7,8,9,10 };

Storage of Array in Computer Memory

1. Array Declaration and Initialization
2. Contiguous Memory Allocation
3. Array Object Structure
4. Zero-Based Indexing
5. Fixed Size

Memory Layout Example

 int[] numbers = new int[9];
 numbers[0] = 40;
....
 numbers[8] = 89;
 The elements 40, 55, 63,17,22,68,89,97,99
are stored in contiguous memory locations,
each occupying space according to the int
data type.

Types of Arrays

Modifying Array Elements

 To change an element, assign a new value to a specific index. The index
begins with 0 and ends at (total array size)-1.

Accessing Elements of Array & Array Methods

 You access elements using their index.
 For example:
int firstAge = ages[0];
// Gets the first element (25) from the ages array
String favoriteColor = colors[2];
// Gets the third element ("Blue") from the colors array

 Int n = arr.length(); //length is a default method in java returns length of arr.

Java Program to
create an integer
array and store some
values and print it...

Java Program to create an string array and store some
values and print it...

Example : List of Students;

Java Program to create an array
of Student with five Student
objects stored in the array.

Java Program to pass an
array to a method.

For Example : returning
sum of array elements.

Multi-dimensional Arrays:

 Java supports arrays of arrays, allowing
you to create matrices or tables.

int[][] matrix = new int[3][3];
// Creates a 3x3 2-d array
matrix[0][0] = 1;
// Sets the value of the element
// at row 0, column 0

Multiply Two Matrices using Arrays...

3D?

Inheritance
Simple, multilevel, multiple, Hierarchical, Hybrid

What is it and why?

 Inheritance is a fundamental concept in object-oriented programming (OOP)
 Allows one class (the child or subclass) to inherit properties and behaviors
from another class(parent class).
 This mechanism promotes code reusability and establishes a natural hierarchy
between classes.

Process of Inheritance

1. SuperClass :Create a class with common attributes (fields) and behaviors
(methods) that can be reused by other classes.
2. SubClass : Create a new class that extends the superclass. This subclass will
automatically inherit all accessible members (fields and methods) of the
superclass.
3. Overriding Methods: If the subclass needs to provide a specific
implementation of a method inherited from the superclass, it can override
that method. Use the @Override annotation.
4. Adding New Members: The subclass can also add new fields and methods that
are specific to it.
5. Use SubClass to Access SuperClass

Syntax

 inheritance is implemented
using the extends keyword.

Types of Inheritance

Single Inheritance

 In single inheritance, a class (subclass)
inherits from one and only one superclass
(parent class). This is the simplest form of
inheritance.

Multilevel Inheritance

 In multilevel inheritance, a class is derived
from another derived class. This creates a
chain of inheritance, where each class inherits
from the previous class in the chain.

Hierarchical Inheritance

 In hierarchical inheritance, multiple subclasses
inherit from a single superclass. This allows
different subclasses to share common properties
and methods from the same superclass.

Multiple Inheritance

 Multiple inheritance allows a class to inherit
from more than one class. However, many
languages, including Java, do not support
multiple inheritance directly for classes to
avoid complexity and ambiguity.
 Instead, multiple inheritance can be achieved
using interfaces. A class can implement
multiple interfaces, thereby inheriting
behaviors from multiple sources.

Hybrid Inheritance

 Hybrid inheritance is a combination of two or
more types of inheritance. For example, it may
combine single, multiple, and hierarchical
inheritance. However, some languages like Java
avoid hybrid inheritance directly through classes
due to complexity and potential issues, but you
can achieve similar effects using interfaces

Say Hello to VS Code... 

 Free
 IDE
 Cross platform
 Large language support
 Extensions
 Shorthand's
 Debugging
 Remote development
 Many more....

Universal Super class Object Class

 In Java, the Object class is the universal
super class from which all other classes
inherit.
 It is the root of the class hierarchy in
Java, and every class, whether explicitly
or implicitly, extends Object.
 This means that Object provides a set of
common methods that are inherited by
all classes, regardless of their specific
type or purpose.

List of
methods in
Object class

Inhibiting Inheritance of Class Using
Final

 In Java, you can prevent a class from being extended
by using the final keyword.
 When a class is declared as final, it cannot be sub
classed, meaning no other class can inherit from it.
 This feature is useful when you want to create an
immutable class or ensure that the class's behavior is
not altered through inheritance.

Access Control and Inheritance

 Java supports access control at the class level and at the level of class
members. At the class level, the following two categories are generally used
i. default case no modifier applied: In the default case, when no access specifier is
applied, the class can be accessed by other classes only in the same package
ii. public : A class declared public may be accessed by any other class in any package.
 To access any of the members data method, or nested class-can be controlled
by the following modifiers.
i. private
ii. Protected
iii. public
iv. default case-no modifier specified

Access Modifiers

Private
 The private members can only be
accessed by the other members
(methods) of the same class. No
other code outside the class can
access them.
private int x;
private int getx();
{
return x;
}

Protected
 The protected members can
accessed by own class and derived
class only.
protected int x;
protected int getx()
{
return x;
}

Access Modifiers continue...

Public
 The public members can accessed
by all the classes.
public int x;
public int getx()
{
return x;
}

Default (no modifier)
 The default members can accessed
by all the classes within the
package only.
int x;
int getx()
{
return x;
}

Inheritance and
Method Overriding

 In a class hierarchy, when a method in a
subclass has the same name and type
signature as a method in its superclass,
then the method in the subclass is said to
override the method in the superclass.
 When an overridden method is called
from within a subclass, it will always
refer to the version of that method
defined by the subclass. The version of
the method defined by the superclass
will be hidden.

Application of keyword Super

 In Java, the super keyword is used within a
subclass to refer to its superclass. It is a
fundamental part of inheritance and serves
several important purposes.
 super allows a subclass to call methods
defined in its superclass. This is useful when
you want to use or extend the functionality
of a superclass method while still keeping its
original behavior.

Accessing Super class Fields:

 super can be used to access
fields of the superclass when
there is a name conflict with
fields in the subclass. This is
done using super.fieldName.

Calling Superclass Constructor

 super is used to call a
constructor of the superclass.
This is especially useful when
you need to initialize the
superclass part of an object
before initializing the
subclass-specific part.

Constructor Method and Inheritance

 Constructors are special methods in Java that are used to initialize objects when
they are created.
 Constructors have the same name as the class and do not have a return type. They
are invoked automatically when an instance of a class is created.
 super Keyword in Constructors
 Constructor Initialization Order
 No-Argument vs. Parameterized Constructors

Method Overriding

 Method overriding is a key concept in object-
oriented programming, particularly in Java.

 It allows a subclass to provide a specific
implementation for a method that is already
defined in its super class.
 This concept enables polymorphism, allowing
objects to be treated as instances of their
super class while executing subclass-specific
behaviors

Dynamic Method Dispatch

 Dynamic method dispatch is a
fundamental concept in object-oriented
programming, particularly in Java.
 It allows the Java runtime to determine
at runtime which method
implementation to invoke when a
method is called on an object.
 This concept is closely tied to
polymorphism and method overriding.

Abstract class

 Abstract classes are a fundamental concept
in object-oriented programming. They serve
as a blueprint for other classes.
 An abstract class cannot be instantiated
directly; instead, it defines a common
interface for other classes.
 Abstract classes provide a base for creating
other classes. They can include abstract
methods (methods without implementation)
that must be implemented by subclasses, as
well as concrete methods (with
implementation).

Final Class and Methods

Final Class:
 A class that cannot be further extended is
called a final class in Java.
 A final class is declared using the final keyword.
 There cannot be any subclass inheritances of a
final class, as the compiler will display error
notes on trying to inherit a final class during a
compilation.

Final Methods:

Final Methods:
 You can also use the final keyword to prevent
methods from being overridden by subclasses.
 This is useful when you want to ensure that
certain methods maintain their original
implementation in subclasses.
Final Variables:
 When applied to variables, the final keyword
indicates that the variable’s value cannot be
 changed once assigned. This is different from
preventing inheritance but is another use of
final in Java.

Interfaces
reference type in Java

Introduction

 An interface is a reference type in Java (and many other
languages) that can contain only constants, method
signatures, default methods, static methods, and nested
types. Interfaces cannot contain instance fields.
 Classes implement interfaces, and interfaces are
implemented by classes.in Java it is a mechanism to
achieve abstraction. There can be only abstract methods
in the Java interface, not method body.
 It is used to achieve abstraction and multiple inheritance
in Java. Java Interface also represents the IS-A
relationship. Interface fields are public, static and final
by default, and the methods are public and abstract.

Declaration of Interface

 In programming, an interface is a
contract that defines a set of
methods or properties that a class
must implement, but does not
provide the actual implementation
for those methods. It essentially
specifies what a class should do,
but not how it should do it.

Syntax:
interface <interface_name>
{
// declare constant fields
// declare methods that abstract
// by default.
}

Example

public interface MyInterface {
void method1();
int method2(String input);
}

 MyInterface is the name of the
interface. method1 and method2
are abstract methods that any
class implementing this interface
must provide concrete
implementations for.

Implementation of interface
To implement an interface, use the keyword implements

Multiple Interfaces

 Java supports multiple interface
implementation without any
issues. A class can implement
more than one interface

Nested interfaces

 An interface can be nested within another interface or class. Nested interfaces are often used to
group related interfaces together and can be either public or package-private (default visibility).

Inheritance of Interfaces

 Inheritance of interfaces refers to the
ability of one interface to extend or inherit
from one or more other interfaces.
 This allows you to create a hierarchy of
interfaces, where a child interface inherits
the methods and properties of its parent
interfaces. Here's an example 0f how
interface inheritance works.
 An interface can extend multiple other
interfaces. The child interface inherits all
abstract methods from the parent
interfaces.

Default Methods
in Interfaces

 The default methods allow an
interface to have methods with an
implementation.
 This helps in adding new methods to
interfaces without affecting existing
implementations.

Static methods in interfaces

 Static methods in interfaces allow to
define methods with a body in the
interface itself, rather than in
implementing classes.
 These methods are called on the
interface class itself, not on
instances of the implementing
classes.

Functional Interfaces

 An Interface that contains exactly one
abstract method is known as functional
interface.
 It can have any number of default, static
methods but can contain only one abstract
method.
 It can also declare methods of object class.
Functional Interface is also known as Single
Abstract Method Interfaces or SAM Interfaces

Annotations

 Annotations start with ‘@’.
 Annotations are used to provide supplemental information about a program.
 Annotations do not change the action of a compiled program.
 Annotations help to associate metadata (information) to the program elements i.e. instance
variables, constructors, methods, classes, etc.
 Annotations are not pure comments as they can change the way a program is treated by the
compiler. See below code for example.
 Annotations basically are used to provide additional information, so could be an alternative to XML
and Java marker interfaces.

Categories of Annotations

 There are broadly 5 categories of annotations as listed:
1. Marker Annotations
2. Single value Annotations
3. Full Annotations
4. Type Annotations
5. Repeating Annotations

Types of Annotations

 Category 1: Marker Annotations
The only purpose is to mark a declaration. These annotations contain no members and
do not consist of any data.
Thus, its presence as an annotation is sufficient. Since the marker interface contains
no members, simply determining whether it is present or absent is sufficient.
@Override is an example of Marker Annotation.
Example
@TestAnnotation()
Category 2: Single value Annotations
These annotations contain only one member and allow a shorthand form of specifying
the value of the member. We only need to specify the value for that member when
the annotation is applied and don’t need to specify the name of the member.
However, in order to use this shorthand, the name of the member must be a value.
Example
@TestAnnotation(“testing”);

 Category 3: Full Annotations
These annotations consist of multiple data members, names, values, pairs.
Example
@TestAnnotation(owner=”Rahul”, value=”Class Geeks”)
 Category 4: Type Annotations
These annotations can be applied to any place where a type is being used. For
example, we can annotate the return type of a method. These are declared
annotated with @Target annotation.
 Category 5: Repeating Annotations
These are the annotations that can be applied to a single item more than once.
For an annotation to be repeatable it must be annotated with the @Repeatable
annotation, which is defined in the java.lang.annotation package. Its value field
specifies the container type for the repeatable annotation. The container is
specified as an annotation whose value field is an array of the repeatable
annotation type.
Hence, to create a repeatable annotation, firstly the container annotation is
created, and then the annotation type is specified as an argument to the
@Repeatable annotation.

Q & A